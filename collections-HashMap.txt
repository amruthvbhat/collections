The HashMap class of the Java collections framework provides the functionality of the hash table data structure.

It stores elements in key/value pairs. Here, keys are unique identifiers used to associate each value on a map.

Create a HashMap
In order to create a hash map, we must import the java.util.HashMap package first. Once we import the package, here is how we can create hashmaps in Java.

// hashMap creation with 8 capacity and 0.6 load factor
HashMap<K, V> numbers = new HashMap<>();

HashMap<String, Integer> numbers = new HashMap<>();
Here, the type of keys is String and the type of values is Integer.

package javasample.collections.HashMap;

import java.util.HashMap;

class Main {
  public static void main(String[] args) {

    // create a hashmap
    HashMap<String, Integer> languages = new HashMap<>();

    // add elements to hashmap
    languages.put("Java", 8);
    languages.put("JavaScript", 1);
    languages.put("Python", 3);
    System.out.println("HashMap: " + languages);
  }
}


Basic Operations on Java HashMap

The HashMap class provides various methods to perform different operations on hashmaps. We will look at some commonly used arraylist operations in this tutorial:

Add elements
Access elements
Change elements
Remove elements
package javasample.collections.HashMap;
import java.util.*;
public class Operations {
	public static void main(String[] args) {

		//1. Add elements to a HashMap
	    // create a hashmap
	    HashMap<String, Integer> numbers = new HashMap<>();

	    System.out.println("Initial HashMap: " + numbers);
	    // put() method to add elements
	    numbers.put("One", 1);
	    numbers.put("Two", 2);
	    numbers.put("Three", 3);
	    System.out.println("HashMap after put(): " + numbers);
	    //----------------------------------------------------------------------
	    
	    //2. Access HashMap Elements
	    HashMap<Integer, String> languages = new HashMap<>();
	    languages.put(1, "Java");
	    languages.put(2, "Python");
	    languages.put(3, "JavaScript");
	    System.out.println("HashMap: " + languages);

	    // get() method to get value
	    String value = languages.get(1);
	    System.out.println("Value at index 1: " + value);
	    //---------------------------------------------------------------------
	    
	    //3. Change HashMap Value
	    HashMap<Integer, String> languages1 = new HashMap<>();
	    languages1.put(1, "Java");
	    languages1.put(2, "Python");
	    languages1.put(3, "JavaScript");
	    System.out.println("Original HashMap: " + languages1);

	    // change element with key 2
	    languages1.replace(2, "C++");
	    System.out.println("HashMap using replace(): " + languages1);
	    //-------------------------------------------------------------------------------
	    
	    
	    //4. Remove HashMap Elements
	    HashMap<Integer, String> languages11 = new HashMap<>();
	    languages11.put(1, "Java");
	    languages11.put(2, "Python");
	    languages11.put(3, "JavaScript");
	    System.out.println("HashMap: " + languages11);

	    // remove element associated with key 2
	    String value1 = languages11.remove(2);
	    System.out.println("Removed value: " + value1);

	    System.out.println("Updated HashMap: " + languages11);
	    //-------------------------------------------------------------------------------
	    
	    



	  }

}

